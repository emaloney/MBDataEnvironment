<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBExpression.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBExpression</TokenIdentifier>
			<Abstract type="html">This class is responsible for evaluating Mockingbird expressions.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
            
			
			<NodeRef refid="11"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asString:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the string context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)asString:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/asString:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asString:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the string context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)asString:(nonnull NSString *)expr error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/asString:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asString:defaultValue:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the string context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)asString:(nonnull NSString *)expr defaultValue:(nullable NSString *)def</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/asString:defaultValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asString:inVariableSpace:defaultValue:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the string context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)asString:(nonnull NSString *)expr inVariableSpace:(nonnull MBVariableSpace *)space defaultValue:(nullable NSString *)def error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The MBVariableSpace instance to use for evaluating the
            expression. This allows the use of variable spaces other than
            the instance associated with the active MBEnvironment. Must not
            be nil.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/asString:inVariableSpace:defaultValue:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asObject:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context. String interpolation
may be used if the expression references more than one value.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable id)asObject:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an object.</Abstract></ReturnValue>
			<Anchor>//api/name/asObject:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asObject:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context. String interpolation
may be used if the expression references more than one value.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable id)asObject:(nonnull NSString *)expr error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an object.</Abstract></ReturnValue>
			<Anchor>//api/name/asObject:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asObject:defaultValue:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context. String interpolation
may be used if the expression references more than one value.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable id)asObject:(nonnull NSString *)expr defaultValue:(nullable id)def</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an object.</Abstract></ReturnValue>
			<Anchor>//api/name/asObject:defaultValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asObject:inVariableSpace:defaultValue:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context. String interpolation
may be used if the expression references more than one value.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable id)asObject:(nonnull NSString *)expr inVariableSpace:(nonnull MBVariableSpace *)space defaultValue:(nullable id)def error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The MBVariableSpace instance to use for evaluating the
            expression. This allows the use of variable spaces other than
            the instance associated with the active MBEnvironment. Must not
            be nil.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an object.</Abstract></ReturnValue>
			<Anchor>//api/name/asObject:inVariableSpace:defaultValue:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asArray:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context without using string
interpolation. Discrete values within the expression are returned as items in
an array.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSArray *)asArray:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an array of
            objects.</Abstract></ReturnValue>
			<Anchor>//api/name/asArray:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asArray:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context without using string
interpolation. Discrete values within the expression are returned as items in
an array.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSArray *)asArray:(nonnull NSString *)expr error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an array of
            objects.</Abstract></ReturnValue>
			<Anchor>//api/name/asArray:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asArray:inVariableSpace:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the object context without using string
interpolation. Discrete values within the expression are returned as items in
an array.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSArray *)asArray:(nonnull NSString *)expr inVariableSpace:(nonnull MBVariableSpace *)space error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The MBVariableSpace instance to use for evaluating the
            expression. This allows the use of variable spaces other than
            the instance associated with the active MBEnvironment. Must not
            be nil.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as an array of
            objects.</Abstract></ReturnValue>
			<Anchor>//api/name/asArray:inVariableSpace:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asNumber:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the numeric context, coercing the result
into a number if necessary (and possible).</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSDecimalNumber *)asNumber:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a numeric
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asNumber:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asNumber:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the numeric context, coercing the result
into a number if necessary (and possible).</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSDecimalNumber *)asNumber:(nonnull NSString *)expr error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a numeric
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asNumber:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asNumber:defaultValue:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the numeric context, coercing the result
into a number if necessary (and possible).</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSDecimalNumber *)asNumber:(nonnull NSString *)expr defaultValue:(nullable NSDecimalNumber *)def</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a numeric
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asNumber:defaultValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asNumber:inVariableSpace:defaultValue:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the numeric context, coercing the result
into a number if necessary (and possible).</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSDecimalNumber *)asNumber:(nonnull NSString *)expr inVariableSpace:(nonnull MBVariableSpace *)space defaultValue:(nullable NSDecimalNumber *)def error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The MBVariableSpace instance to use for evaluating the
            expression. This allows the use of variable spaces other than
            the instance associated with the active MBEnvironment. Must not
            be nil.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if the method would
            otherwise return nil.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a numeric
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asNumber:inVariableSpace:defaultValue:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asBoolean:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the boolean context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)asBoolean:(nullable NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a boolean
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asBoolean:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asBoolean:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the boolean context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)asBoolean:(nullable NSString *)expr error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a boolean
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asBoolean:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asBoolean:defaultValue:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the boolean context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)asBoolean:(nullable NSString *)expr defaultValue:(BOOL)def</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if there was a problem evaluating
            expr.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a boolean
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asBoolean:defaultValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/asBoolean:inVariableSpace:defaultValue:error:</TokenIdentifier>
			<Abstract type="html">Evaluates the given expression in the boolean context.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)asBoolean:(nullable NSString *)expr inVariableSpace:(nonnull MBVariableSpace *)space defaultValue:(BOOL)def error:(MBExpressionErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression to evaluate.</Abstract>
				</Parameter><Parameter>
					<Name>space</Name>
					<Abstract type="html">The MBVariableSpace instance to use for evaluating the
            expression. This allows the use of variable spaces other than
            the instance associated with the active MBEnvironment. Must not
            be nil.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default return value to use if there was a problem evaluating
            expr.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            MBExpressionError instance. If this parameter is non-nil
            and an error occurs during evaluation, *errPtr will be updated
            to point to an MBExpressionError instance describing the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of evaluating the expression expr as a boolean
            expression.</Abstract></ReturnValue>
			<Anchor>//api/name/asBoolean:inVariableSpace:defaultValue:error:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/booleanFromValue:</TokenIdentifier>
			<Abstract type="html">Exposes the mechanism the expression evaluator uses for coercing arbitrary
object values into booleans.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)booleanFromValue:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The object to interpret as a boolean</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The boolean representation of val</Abstract></ReturnValue>
			<Anchor>//api/name/booleanFromValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/stringFromBoolean:</TokenIdentifier>
			<Abstract type="html">Exposes the mechanism the expression evaluator uses for representing boolean
values as strings.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSString *)stringFromBoolean:(BOOL)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The boolean value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The string representation of val; either kMBMLBooleanStringTrue
            or kMBMLBooleanStringFalse.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromBoolean:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/numberFromValue:</TokenIdentifier>
			<Abstract type="html">Exposes the mechanism the expression evaluator uses for coercing arbitrary
object values into numbers.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (nullable NSDecimalNumber *)numberFromValue:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The object to interpret as a number</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If val can be interpreted as a number, the return value is an
            NSDecimalNumber containing that number. If val cannot be 
            interpreted as a number, or if the resulting number is equal to
            [&lt;code&gt;NSNumber notANumber&lt;/code&gt;], nil will be returned.</Abstract></ReturnValue>
			<Anchor>//api/name/numberFromValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/value:isEqualTo:</TokenIdentifier>
			<Abstract type="html">Exposes the mechanism the expression evaluator uses for determining if two
objects have equal values.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (BOOL)value:(nullable id)lValue isEqualTo:(nullable id)rValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>lValue</Name>
					<Abstract type="html">The left value of the comparison</Abstract>
				</Parameter><Parameter>
					<Name>rValue</Name>
					<Abstract type="html">The right value of the comparison</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The return value of [&lt;code&gt;lValue isEqual:rValue&lt;/code&gt;] if
            lValue and rValue are of the same type. Otherwise, falls back on
            [MBExpression compareLeftValue:lValue againstRightValue:rValue].</Abstract></ReturnValue>
			<Anchor>//api/name/value:isEqualTo:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBExpression/compareLeftValue:againstRightValue:</TokenIdentifier>
			<Abstract type="html">Exposes the mechanism the expression evaluator uses to determine the relative
order of two object values.</Abstract>
			<DeclaredIn>MBExpression.h</DeclaredIn>
			
			<Declaration>+ (NSComparisonResult)compareLeftValue:(nullable id)lValue againstRightValue:(nullable id)rValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>lValue</Name>
					<Abstract type="html">The left value of the comparison</Abstract>
				</Parameter><Parameter>
					<Name>rValue</Name>
					<Abstract type="html">The right value of the comparison</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSOrderedAscending if lValue is less than rValue;
            NSOrderedDescending if lValue is greater than rValue;
            NSOrderedSame if lValue is equal to rValue.</Abstract></ReturnValue>
			<Anchor>//api/name/compareLeftValue:againstRightValue:</Anchor>
            <NodeRef refid="11"/>
		</Token>
		
        
        
	</File>
</Tokens>