<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBMLDataProcessingFunctions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBMLDataProcessingFunctions</TokenIdentifier>
			<Abstract type="html">This class provides a set of MBML functions for manipulating data structures.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
            
			
			<NodeRef refid="15"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/containsValue:</TokenIdentifier>
			<Abstract type="html">Determines whether one or more collections contains a specified value.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)containsValue:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">@YES if any of the input collections contains the test value;
            @NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/containsValue:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/setContains:</TokenIdentifier>
			<Abstract type="html">Determines whether an NSSet contains a given object.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)setContains:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">@YES if the input set contains the test value; @NO
            otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/setContains:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/collectionPassesTest:</TokenIdentifier>
			<Abstract type="html">Applies a boolean expression test to each member of a collection and
returns @YES if and only if the expression test evaluates to true
for every item in the collection.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)collectionPassesTest:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">@YES if every item in the collection passes the test; NO
            otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/collectionPassesTest:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/selectFirstValue:</TokenIdentifier>
			<Abstract type="html">Selects the first non-nil (and non-NSNull) value from among two or
more parameters.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)selectFirstValue:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">an array containing the input parameters for the function</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of performing the evaluations described above.</Abstract></ReturnValue>
			<Anchor>//api/name/selectFirstValue:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesPassingTest:</TokenIdentifier>
			<Abstract type="html">Evaluates a boolean test expression against each value in one or more
collections, and returns an array containing the collection values
for which test evaluates to true.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)valuesPassingTest:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the values in the collections for which the
            test expression evaluates to true.</Abstract></ReturnValue>
			<Anchor>//api/name/valuesPassingTest:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesIntersect:</TokenIdentifier>
			<Abstract type="html">Tests whether two collections share at least one value in common.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/valuesPassingTest:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)valuesIntersect:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">@YES if the two collection objects share at least one common
            value, @NO if they do not.</Abstract></ReturnValue>
			<Anchor>//api/name/valuesIntersect:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/join:</TokenIdentifier>
			<Abstract type="html">Creates a string by concatenating the string values of the elements in one or
more collections, using the specified separator string between each value in
the returned string.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/splitLines:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)join:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the string values of the items in the
            collections, separated by the string specified as the separator.</Abstract></ReturnValue>
			<Anchor>//api/name/join:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/split:</TokenIdentifier>
			<Abstract type="html">Creates an array by splitting a string on a given delimeter.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/splitLines:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)split:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the components of the split string.</Abstract></ReturnValue>
			<Anchor>//api/name/split:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/splitLines:</TokenIdentifier>
			<Abstract type="html">Creates an array by splitting a string at newlines.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/join:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)splitLines:(NSString *)stringToSplit</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringToSplit</Name>
					<Abstract type="html">The string being split.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray containing the individual lines of stringToSplit.</Abstract></ReturnValue>
			<Anchor>//api/name/splitLines:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/appendArrays:</TokenIdentifier>
			<Abstract type="html">Returns a single array containing all the elements in the arrays specified
in the input parameters.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)appendArrays:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing all of the elements in the arrays referenced
            by the passed-in expression parameters.</Abstract></ReturnValue>
			<Anchor>//api/name/appendArrays:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/flattenArrays:</TokenIdentifier>
			<Abstract type="html">Accepts one or more input arrays and returns a single array containing a
flattened version of the contents of the input arrays.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)flattenArrays:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The flattened array.</Abstract></ReturnValue>
			<Anchor>//api/name/flattenArrays:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/mergeDictionaries:</TokenIdentifier>
			<Abstract type="html">Merges the keys and values contained in multiple dictionaries into a single
dictionary.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)mergeDictionaries:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/mergeDictionaries:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneMatchingLeaves:</TokenIdentifier>
			<Abstract type="html">Traverses an array-based tree structure, removing any leaves (non-arrays)
whose values match a given test expression. The resulting pruned tree is then
returned in an array.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneNonmatchingLeaves:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)pruneMatchingLeaves:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/pruneMatchingLeaves:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneNonmatchingLeaves:</TokenIdentifier>
			<Abstract type="html">Traverses an array-based tree structure, removing any leaves (non-arrays)
whose values do not match a given test expression. The resulting pruned tree
is then returned in an array.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/pruneMatchingLeaves:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)pruneNonmatchingLeaves:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/pruneNonmatchingLeaves:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/filter:</TokenIdentifier>
			<Abstract type="html">Filters a data model by applying a test expression against each item in the
collection.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)filter:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array or dictionary containing the filtered items. If the *data
            model* collection is a dictionary, the returned value will be a
            dictionary. Otherwise, an array will be returned.</Abstract></ReturnValue>
			<Anchor>//api/name/filter:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/list:</TokenIdentifier>
			<Abstract type="html">Iterates over (and potentially recurses into) the items in a collection object
holding an arbitrary data model, and returns an NSArray containing a list of
values. The values in the returned array will reflect the ordering of any
arrays iterated; however, iterating dictionaries or sets will result in
non-deterministic ordering.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)list:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/list:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associate:</TokenIdentifier>
			<Abstract type="html">Associates a set of keys with values by iterating over (and potentially
recursing into) a collection object holding an arbitrary data model. If the
association would result in more than one value for a given key, the multiple
values will be placed into an array.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associateWithSingleValue:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)associate:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/associate:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associateWithSingleValue:</TokenIdentifier>
			<Abstract type="html">Associates a set of keys with values by iterating over (and potentially
recursing into) a collection object holding an arbitrary data model. If the
association would result in more than one value for a given key, additional
values are ignored and only one value will be returned. Assume
non-deterministic behavior for multiple values.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associate:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)associateWithSingleValue:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/associateWithSingleValue:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associateWithArray:</TokenIdentifier>
			<Abstract type="html">Associates a set of keys with values by iterating over (and potentially
recursing into) a collection object holding an arbitrary data model. The
value of each key will always be an array, even if the key only maps to a
single value.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/associateWithSingleValue:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)associateWithArray:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/associateWithArray:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/sort:</TokenIdentifier>
			<Abstract type="html">Returns an array containing the sorted values of a collection object.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)sort:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The function result.</Abstract></ReturnValue>
			<Anchor>//api/name/sort:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/unique:</TokenIdentifier>
			<Abstract type="html">Iterates over the values supplied by the passed-in enumerator, and returns an
array containing the unique values encountered.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)unique:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the unique values in the input collection.</Abstract></ReturnValue>
			<Anchor>//api/name/unique:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/reverse:</TokenIdentifier>
			<Abstract type="html">Returns a new NSArray by reversing the order of the items in the passed-in
array.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)reverse:(id)param</Declaration>
			<Parameters>
				<Parameter>
					<Name>param</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the reversed values of the input array.</Abstract></ReturnValue>
			<Anchor>//api/name/reverse:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/reduce:</TokenIdentifier>
			<Abstract type="html">Reduce an array of items into a single item.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)reduce:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The result of the reduction.</Abstract></ReturnValue>
			<Anchor>//api/name/reduce:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/distributeArrayElements:</TokenIdentifier>
			<Abstract type="html">Distributes the elements contained in a single input array across multiple
arrays.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/groupArrayElements:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)distributeArrayElements:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing returned array count arrays containing the
            elements distributed from source array.</Abstract></ReturnValue>
			<Anchor>//api/name/distributeArrayElements:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/groupArrayElements:</TokenIdentifier>
			<Abstract type="html">Groups the elements in a single array into multiple arrays.</Abstract>
			<DeclaredIn>MBMLDataProcessingFunctions.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/MBMLDataProcessingFunctions/distributeArrayElements:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)groupArrayElements:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing one or more group arrays.</Abstract></ReturnValue>
			<Anchor>//api/name/groupArrayElements:</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
        
        
	</File>
</Tokens>