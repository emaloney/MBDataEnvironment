<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBAttributeValidator.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBAttributeValidator</TokenIdentifier>
			<Abstract type="html">MBAttributeValidator instances can be used to verify that a given
MBDataModel contains an expected set of values.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBAttributeValidator/validatorForDataModel:</TokenIdentifier>
			<Abstract type="html">Returns a new MBAttributeValidator to be used for validating the specified
MBDataModel.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>+ (nonnull instancetype)validatorForDataModel:(nonnull MBDataModel *)model</Declaration>
			<Parameters>
				<Parameter>
					<Name>model</Name>
					<Abstract type="html">The MBDataModel to be validated.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An MBAttributeValidator that can be used to validate model.</Abstract></ReturnValue>
			<Anchor>//api/name/validatorForDataModel:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/setModel:</TokenIdentifier>
			<Abstract type="html">Returns the MBDataModel that the receiver was constructed to validate.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nonnull, nonatomic, readonly) MBDataModel *model</Declaration>
			
			
			<Anchor>//api/name/model</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/model</TokenIdentifier>
			<Abstract type="html">Returns the MBDataModel that the receiver was constructed to validate.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nonnull, nonatomic, readonly) MBDataModel *model</Declaration>
			
			
			<Anchor>//api/name/model</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBAttributeValidator/model</TokenIdentifier>
			<Abstract type="html">Returns the MBDataModel that the receiver was constructed to validate.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nonnull, nonatomic, readonly) MBDataModel *model</Declaration>
			
			
			<Anchor>//api/name/model</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/setValidationErrorMessages:</TokenIdentifier>
			<Abstract type="html">Returns an array of NSStrings containing error messages for any problems
    encountered during validation. Will be nil if no validation errors
    have occurred. </Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, readonly) NSArray *validationErrorMessages</Declaration>
			
			
			<Anchor>//api/name/validationErrorMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/validationErrorMessages</TokenIdentifier>
			<Abstract type="html">Returns an array of NSStrings containing error messages for any problems
    encountered during validation. Will be nil if no validation errors
    have occurred. </Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, readonly) NSArray *validationErrorMessages</Declaration>
			
			
			<Anchor>//api/name/validationErrorMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/MBAttributeValidator/validationErrorMessages</TokenIdentifier>
			<Abstract type="html">Returns an array of NSStrings containing error messages for any problems
    encountered during validation. Will be nil if no validation errors
    have occurred. </Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>@property (nullable, nonatomic, readonly) NSArray *validationErrorMessages</Declaration>
			
			
			<Anchor>//api/name/validationErrorMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/require:or:</TokenIdentifier>
			<Abstract type="html">Requires that the data model contain either attr1 or attr2 but not
both.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>- (BOOL)require:(nonnull NSString *)attr1 or:(nonnull NSString *)attr2</Declaration>
			<Parameters>
				<Parameter>
					<Name>attr1</Name>
					<Abstract type="html">The name of the first attribute.</Abstract>
				</Parameter><Parameter>
					<Name>attr2</Name>
					<Abstract type="html">The name of the second attribute.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the validation requirement was satisfied; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/require:or:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/require:or:butNotBoth:</TokenIdentifier>
			<Abstract type="html">Requires that the data model contain either attr1 or attr2.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>- (BOOL)require:(nonnull NSString *)attr1 or:(nonnull NSString *)attr2 butNotBoth:(BOOL)onlyAllowOne</Declaration>
			<Parameters>
				<Parameter>
					<Name>attr1</Name>
					<Abstract type="html">The name of the first attribute.</Abstract>
				</Parameter><Parameter>
					<Name>attr2</Name>
					<Abstract type="html">The name of the second attribute.</Abstract>
				</Parameter><Parameter>
					<Name>onlyAllowOne</Name>
					<Abstract type="html">If YES, the requirement will be satisfied only
            if attr1 or attr2 exists but not both. If NO, the requirement
            will be satisfied if either attr1 or attr2 is present or
            if both are present.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the validation requirement was satisfied; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/require:or:butNotBoth:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/requireAtLeastOneOf:</TokenIdentifier>
			<Abstract type="html">Requires at least one of a set of attribute names to be present in the data
model. Validation will fail if none of the specified attributes are present.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>- (BOOL)requireAtLeastOneOf:(nonnull NSObject&lt;NSFastEnumeration&gt; *)attrs</Declaration>
			<Parameters>
				<Parameter>
					<Name>attrs</Name>
					<Abstract type="html">An enumeration of NSStrings representing the attribute names
            to validate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the validation requirement was satisfied; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/requireAtLeastOneOf:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/requireExactlyOneOf:</TokenIdentifier>
			<Abstract type="html">Requires exactly one of a set of attribute names to be present in the data
model. Validation will fail if none of the specified attributes are present,
or if more than one is present.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>- (BOOL)requireExactlyOneOf:(nonnull NSObject&lt;NSFastEnumeration&gt; *)attrs</Declaration>
			<Parameters>
				<Parameter>
					<Name>attrs</Name>
					<Abstract type="html">An enumeration of NSStrings representing the attribute names
            to validate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the validation requirement was satisfied; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/requireExactlyOneOf:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBAttributeValidator/validate</TokenIdentifier>
			<Abstract type="html">Returns YES if all validation requirements were satisfied.</Abstract>
			<DeclaredIn>MBAttributeValidator.h</DeclaredIn>
			
			<Declaration>- (BOOL)validate</Declaration>
			
			<ReturnValue><Abstract type="html">YES if validation succeeded; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/validate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>