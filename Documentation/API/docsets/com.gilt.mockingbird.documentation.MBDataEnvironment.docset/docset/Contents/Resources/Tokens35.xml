<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBStringConversions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBStringConversions</TokenIdentifier>
			<Abstract type="html">This class provides an interface for converting between strings, expression
results, and values of other types, such as:</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
            
			
			<NodeRef refid="35"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/arrayFromCommaSeparatedString:</TokenIdentifier>
			<Abstract type="html">Splits a comma-separated string into its individual, whitespace-trimmed
components.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSArray *)arrayFromCommaSeparatedString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to split.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray containing one or more elements. If str does not
            contain any commas, the returned array will contain one element:
            str itself.</Abstract></ReturnValue>
			<Anchor>//api/name/arrayFromCommaSeparatedString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/arrayFromCommaSeparatedExpressionResult:</TokenIdentifier>
			<Abstract type="html">Evaluates an expression and splits the resulting comma-separated string into
its individual, whitespace-trimmed components.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSArray *)arrayFromCommaSeparatedExpressionResult:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray containing zero or more elements. If expr evaluates
            to nil, a zero-element array is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/arrayFromCommaSeparatedExpressionResult:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/arrayFromString:withSeparator:trimResult:</TokenIdentifier>
			<Abstract type="html">Splits a string at the given separator, returning the individual
components.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSArray *)arrayFromString:(nonnull NSString *)str withSeparator:(nonnull NSString *)separator trimResult:(BOOL)trim</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to split.</Abstract>
				</Parameter><Parameter>
					<Name>separator</Name>
					<Abstract type="html">The separator, indicating where str should be split.</Abstract>
				</Parameter><Parameter>
					<Name>trim</Name>
					<Abstract type="html">If YES, leading and trailing whitespace will be removed
            from the individual components before they are returned in the
            array.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSArray containing one or more elements.</Abstract></ReturnValue>
			<Anchor>//api/name/arrayFromString:withSeparator:trimResult:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/pointFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGPoint value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGPoint)pointFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGPoint value that corresponds with str.
            Returns CGPointZero and logs an error to the
            console if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/pointFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/pointFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGPoint value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGPoint)pointFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGPoint value that corresponds with str.
            Returns CGPointZero if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/pointFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/pointFromObject:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret an arbitrary object value as a CGPoint.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGPoint)pointFromObject:(nonnull id)obj error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object to be interpreted.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGPoint value that corresponds with obj. Returns
            CGPointZero if obj couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/pointFromObject:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/pointFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an object expression and attempts to interpret the result as a
CGPoint value using the pointFromObject:error: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGPoint)pointFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGPoint value that corresponds with the
            result of evaluating expr as a string. Returns
            CGPointZero and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/pointFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/stringFromPoint:</TokenIdentifier>
			<Abstract type="html">Converts a CGPoint value into a string that can be parsed by
pointFromString:.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSString *)stringFromPoint:(CGPoint)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The value to convert into a string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string representation of val; never nil.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromPoint:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGSize value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGSize)sizeFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGSize value that corresponds with str.
            Returns CGPointZero and logs an error to the
            console if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGSize value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGSize)sizeFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGSize value that corresponds with str.
            Returns CGPointZero if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeFromObject:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret an arbitrary object value as a CGSize.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGSize)sizeFromObject:(nonnull id)obj error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object to be interpreted.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGSize value that corresponds with obj. Returns
            CGSizeZero if obj couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeFromObject:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an object expression and attempts to interpret the result as a
CGSize value using the sizeFromObject:error: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGSize)sizeFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGSize value that corresponds with the
            result of evaluating expr as a string. Returns
            CGSizeZero and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/stringFromSize:</TokenIdentifier>
			<Abstract type="html">Converts a CGSize value into a string that can be parsed by
sizeFromString:.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSString *)stringFromSize:(CGSize)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The value to convert into a string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string representation of val; never nil.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromSize:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/rectFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGRect value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGRect)rectFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGRect value that corresponds with str.
            Returns CGRectZero and logs an error to the
            console if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/rectFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/rectFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a CGRect value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGRect)rectFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGRect value that corresponds with str.
            Returns CGRectZero if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/rectFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/rectFromObject:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret an arbitrary object value as a CGRect.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGRect)rectFromObject:(nonnull id)obj error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object to be interpreted.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGRect value that corresponds with obj. Returns
            CGRectZero if obj couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/rectFromObject:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/rectFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an object expression and attempts to interpret the result as a
CGRect value using the rectFromObject:error: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGRect)rectFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The CGRect value that corresponds with the
            result of evaluating expr as a string. Returns
            CGRectZero and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/rectFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/stringFromRect:</TokenIdentifier>
			<Abstract type="html">Converts a CGRect value into a string that can be parsed by
rectFromString:.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull NSString *)stringFromRect:(CGRect)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>val</Name>
					<Abstract type="html">The value to convert into a string.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string representation of val; never nil.</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromRect:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeDimensionFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an expression as a size dimension value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGFloat)sizeDimensionFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The size dimension expression. This expression is expected to
            yield either a numeric value or a string containing only the 
            wildcard character.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of the size dimension yielded by the expression expr.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeDimensionFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/sizeDimensionFromString:</TokenIdentifier>
			<Abstract type="html">Parses a string into a size dimension value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (CGFloat)sizeDimensionFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The size dimension, as a string. This string is expected to
            contain either a numeric value or the wildcard character.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of the size dimension specified by str.</Abstract></ReturnValue>
			<Anchor>//api/name/sizeDimensionFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/parseString:asSize:</TokenIdentifier>
			<Abstract type="html">Parses a CGSize from a comma-separated string containing two components:
a width and a height.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (BOOL)parseString:(nonnull NSString *)sizeStr asSize:(nonnull out CGSize *)sizePtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>sizeStr</Name>
					<Abstract type="html">A string following the format &quot;width,height&quot; where
            each dimension is specified as a number or a wildcard character.</Abstract>
				</Parameter><Parameter>
					<Name>sizePtr</Name>
					<Abstract type="html">If the string to be parsed is in the expected format,
            on exit, the CGSize at the memory address sizePtr will be
            updated to reflect the value of the size dimensions parsed from
            sizeStr. No modification occurs if the method returns NO.
            This parameter must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success; NO if the input string is not in the expected
            format.</Abstract></ReturnValue>
			<Anchor>//api/name/parseString:asSize:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/parseString:asRect:</TokenIdentifier>
			<Abstract type="html">Parses a CGRect from a comma-separated string containing four components:
the x and y coordinates of the rectangle&apos;s origin, followed by the width
and height dimensions of the rectangle.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (BOOL)parseString:(nonnull NSString *)rectStr asRect:(nonnull out CGRect *)rectPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>rectStr</Name>
					<Abstract type="html">A string following the format
            &quot;originX,originY,width,height&quot;. 
            The originX and originY values must be specified 
            numerically. The width and height dimensions can 
            either be specified as a number or a wildcard character.</Abstract>
				</Parameter><Parameter>
					<Name>rectPtr</Name>
					<Abstract type="html">If the string to be parsed is in the expected format,
            on exit, the CGRect at the memory address rectPtr will be
            updated to reflect the value of the rectangle parsed from
            rectStr. No modification occurs if the method returns NO.
            This parameter must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES on success; NO if the input string is not in the expected
            format.</Abstract></ReturnValue>
			<Anchor>//api/name/parseString:asRect:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/lineBreakModeFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSLineBreakMode value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSLineBreakMode)lineBreakModeFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSLineBreakMode value that corresponds with str.
            Returns NSLineBreakByWordWrapping and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/lineBreakModeFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/lineBreakModeFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSLineBreakMode value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSLineBreakMode)lineBreakModeFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSLineBreakMode value that corresponds with str.
            Returns NSLineBreakByWordWrapping if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/lineBreakModeFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/lineBreakModeFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as an
NSLineBreakMode value using the lineBreakModeFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSLineBreakMode)lineBreakModeFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSLineBreakMode value that corresponds with the
            result of evaluating expr as a string. Returns
            NSLineBreakByWordWrapping and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/lineBreakModeFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textAlignmentFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSTextAlignment value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSTextAlignment)textAlignmentFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSTextAlignment value that corresponds with str.
Returns NSTextAlignmentLeft and logs an error to the
console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/textAlignmentFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textAlignmentFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSTextAlignment value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSTextAlignment)textAlignmentFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSTextAlignment value that corresponds with str.
Returns NSTextAlignmentLeft if str isn&apos;t
recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/textAlignmentFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textAlignmentFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as an
NSTextAlignment value using the textAlignmentFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSTextAlignment)textAlignmentFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSTextAlignment value that corresponds with the
result of evaluating expr as a string. Returns
NSTextAlignmentLeft and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/textAlignmentFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/dateFormatterStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSDateFormatterStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSDateFormatterStyle)dateFormatterStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSDateFormatterStyle value that corresponds with str.
            Returns NSDateFormatterNoStyle and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/dateFormatterStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/dateFormatterStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an NSDateFormatterStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSDateFormatterStyle)dateFormatterStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSDateFormatterStyle value that corresponds with str.
            Returns NSDateFormatterNoStyle if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/dateFormatterStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/dateFormatterStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as an
NSDateFormatterStyle value using the dateFormatterStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (NSDateFormatterStyle)dateFormatterStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The NSDateFormatterStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            NSDateFormatterNoStyle and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/dateFormatterStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/offsetFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIOffset value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIOffset)offsetFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIOffset value that corresponds with str.
Returns UIOffsetZero and logs an error to the
console if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/offsetFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/offsetFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIOffset value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIOffset)offsetFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIOffset value that corresponds with str.
Returns UIOffsetZero if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/offsetFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/offsetFromObject:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret an arbitrary object value as a UIOffset.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIOffset)offsetFromObject:(nonnull id)obj error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object to be interpreted.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIOffset value that corresponds with obj. Returns
UIOffsetZero if obj couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/offsetFromObject:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/offsetFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an object expression and attempts to interpret the result as a
UIOffset value using the offsetFromObject:error: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIOffset)offsetFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIOffset value that corresponds with the
result of evaluating expr as a string. Returns
UIOffsetZero and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/offsetFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/edgeInsetsFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIEdgeInsets value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIEdgeInsets)edgeInsetsFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIEdgeInsets value that corresponds with str.
Returns UIEdgeInsetsZero and logs an error to the
console if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/edgeInsetsFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/edgeInsetsFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIEdgeInsets value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIEdgeInsets)edgeInsetsFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIEdgeInsets value that corresponds with str.
Returns UIEdgeInsetsZero if str couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/edgeInsetsFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/edgeInsetsFromObject:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret an arbitrary object value as a UIEdgeInsets.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIEdgeInsets)edgeInsetsFromObject:(nonnull id)obj error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object to be interpreted.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIEdgeInsets value that corresponds with obj. Returns
UIEdgeInsetsZero if obj couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/edgeInsetsFromObject:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/edgeInsetsFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates an object expression and attempts to interpret the result as a
UIEdgeInsets value using the edgeInsetsFromObject:error: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIEdgeInsets)edgeInsetsFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIEdgeInsets value that corresponds with the
result of evaluating expr as a string. Returns
UIEdgeInsetsZero and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/edgeInsetsFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/colorFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIColor value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull UIColor *)colorFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIColor value that corresponds with the
result of evaluating expr as a string. Returns
[&lt;code&gt;UIColor yellowColor&lt;/code&gt;] and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/colorFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/colorFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIColor value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull UIColor *)colorFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIColor value that corresponds with the
result of evaluating expr as a string. Returns
[&lt;code&gt;UIColor yellowColor&lt;/code&gt;] if the expression result
couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/colorFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/colorFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIColor value using the colorFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (nonnull UIColor *)colorFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIColor value that corresponds with the
result of evaluating expr as a string. Returns
[&lt;code&gt;UIColor yellowColor&lt;/code&gt;] and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/colorFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/scrollViewIndicatorStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIScrollViewIndicatorStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIScrollViewIndicatorStyle)scrollViewIndicatorStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIScrollViewIndicatorStyle value that corresponds with str.
Returns UIScrollViewIndicatorStyleDefault and logs an error to the
console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/scrollViewIndicatorStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/scrollViewIndicatorStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIScrollViewIndicatorStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIScrollViewIndicatorStyle)scrollViewIndicatorStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIScrollViewIndicatorStyle value that corresponds with str.
Returns UIScrollViewIndicatorStyleDefault if str isn&apos;t
recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/scrollViewIndicatorStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/scrollViewIndicatorStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIScrollViewIndicatorStyle value using the
scrollViewIndicatorStyleFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIScrollViewIndicatorStyle)scrollViewIndicatorStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIScrollViewIndicatorStyle value that corresponds with the
result of evaluating expr as a string. Returns
UIScrollViewIndicatorStyleDefault and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/scrollViewIndicatorStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/activityIndicatorViewStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIActivityIndicatorViewStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIActivityIndicatorViewStyle)activityIndicatorViewStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIActivityIndicatorViewStyle value that corresponds with
str. Returns UIActivityIndicatorViewStyleWhite and logs an error
to the console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/activityIndicatorViewStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/activityIndicatorViewStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIActivityIndicatorViewStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIActivityIndicatorViewStyle)activityIndicatorViewStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIActivityIndicatorViewStyle value that corresponds with
str. Returns UIActivityIndicatorViewStyleWhite if str isn&apos;t
recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/activityIndicatorViewStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/activityIndicatorViewStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIActivityIndicatorViewStyle value using the
activityIndicatorViewStyleFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIActivityIndicatorViewStyle)activityIndicatorViewStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIActivityIndicatorViewStyle value that corresponds with the
result of evaluating expr as a string. Returns
UIActivityIndicatorViewStyleWhite and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/activityIndicatorViewStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/buttonTypeFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIButtonType value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIButtonType)buttonTypeFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIButtonType value that corresponds with str.
Returns UIButtonTypeCustom and logs an error to the
console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/buttonTypeFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/buttonTypeFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIButtonType value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIButtonType)buttonTypeFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
NSError instance in the event of a problem interpreting str.
If non-nil and an error occurs, *errPtr will be set to an
NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIButtonType value that corresponds with str.
Returns UIButtonTypeCustom if str isn&apos;t
recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/buttonTypeFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/buttonTypeFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIButtonType value using the buttonTypeFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIButtonType)buttonTypeFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIButtonType value that corresponds with the
result of evaluating expr as a string. Returns
UIButtonTypeCustom and logs an error to the
console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/buttonTypeFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textBorderStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITextBorderStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITextBorderStyle)textBorderStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITextBorderStyle value that corresponds with str.
            Returns UITextBorderStyleNone and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/textBorderStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textBorderStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITextBorderStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITextBorderStyle)textBorderStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITextBorderStyle value that corresponds with str.
            Returns UITextBorderStyleNone if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/textBorderStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/textBorderStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UITextBorderStyle value using the textBorderStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITextBorderStyle)textBorderStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITextBorderStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITextBorderStyleNone and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/textBorderStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewStyle)tableViewStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewStyle value that corresponds with str.
            Returns UITableViewStylePlain and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewStyle)tableViewStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewStyle value that corresponds with str.
            Returns UITableViewStylePlain if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UITableViewStyle value using the tableViewStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewStyle)tableViewStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewStylePlain and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewCellStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellStyle)tableViewCellStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellStyle value that corresponds with str.
            Returns UITableViewCellStyleDefault and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewCellStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellStyle)tableViewCellStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellStyle value that corresponds with str.
            Returns UITableViewCellStyleDefault if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UITableViewCellStyle value using the tableViewCellStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellStyle)tableViewCellStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewCellStyleDefault and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellSelectionStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an MBTableViewCellSelectionStyle value,
a special type that is cast-compatible with  UITableViewCellSelectionStyle
but adds the value MBTableViewCellSelectionStyleGradient to represent a
custom cell selection style using a gradient.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (MBTableViewCellSelectionStyle)tableViewCellSelectionStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The MBTableViewCellSelectionStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewCellSelectionStyleBlue and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellSelectionStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellSelectionStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as an MBTableViewCellSelectionStyle value,
a special type that is cast-compatible with  UITableViewCellSelectionStyle
but adds the value MBTableViewCellSelectionStyleGradient to represent a
custom cell selection style using a gradient.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (MBTableViewCellSelectionStyle)tableViewCellSelectionStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The MBTableViewCellSelectionStyle value that corresponds with
            str. Returns UITableViewCellSelectionStyleBlue if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellSelectionStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellSelectionStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as an
MBTableViewCellSelectionStyle value using the
tableViewCellSelectionStyleFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (MBTableViewCellSelectionStyle)tableViewCellSelectionStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The MBTableViewCellSelectionStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewCellSelectionStyleBlue and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellSelectionStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellAccessoryTypeFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewCellAccessoryType value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellAccessoryType)tableViewCellAccessoryTypeFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellAccessoryType value that corresponds with
            str. Returns UITableViewCellAccessoryNone and logs an error to
            the console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellAccessoryTypeFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellAccessoryTypeFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewCellAccessoryType value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellAccessoryType)tableViewCellAccessoryTypeFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellAccessoryType value that corresponds with
            str. Returns UITableViewCellAccessoryNone if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellAccessoryTypeFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewCellAccessoryTypeFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UITableViewCellAccessoryType value using the
tableViewCellAccessoryTypeFromString: method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewCellAccessoryType)tableViewCellAccessoryTypeFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewCellAccessoryType value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewCellAccessoryNone and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewCellAccessoryTypeFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewRowAnimationFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewRowAnimation value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewRowAnimation)tableViewRowAnimationFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewRowAnimation value that corresponds with str.
            Returns UITableViewRowAnimationNone and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewRowAnimationFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewRowAnimationFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UITableViewRowAnimation value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewRowAnimation)tableViewRowAnimationFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewRowAnimation value that corresponds with str.
            Returns UITableViewRowAnimationNone if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewRowAnimationFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/tableViewRowAnimationFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UITableViewRowAnimation value using the tableViewRowAnimationFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UITableViewRowAnimation)tableViewRowAnimationFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UITableViewRowAnimation value that corresponds with the
            result of evaluating expr as a string. Returns 
            UITableViewRowAnimationNone and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/tableViewRowAnimationFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/controlStateFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIControlState value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIControlState)controlStateFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIControlState value that corresponds with str.
            Returns UIControlStateNormal and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/controlStateFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/controlStateFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIControlState value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIControlState)controlStateFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIControlState value that corresponds with str.
            Returns UIControlStateNormal if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/controlStateFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/controlStateFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIControlState value using the controlStateFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIControlState)controlStateFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIControlState value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIControlStateNormal and logs an error to the
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/controlStateFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewAnimationOptionsFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIViewAnimationOptions value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewAnimationOptions)viewAnimationOptionsFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewAnimationOptions value that corresponds with str.
            Returns 0 and logs an error to the console if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/viewAnimationOptionsFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewAnimationOptionsFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIViewAnimationOptions value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewAnimationOptions)viewAnimationOptionsFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewAnimationOptions value that corresponds with str.
            Returns 0 if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/viewAnimationOptionsFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewAnimationOptionsFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIViewAnimationOptions value using the viewAnimationOptionsFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewAnimationOptions)viewAnimationOptionsFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewAnimationOptions value that corresponds with the
            result of evaluating expr as a string. Returns 
            0 and logs an error to the console if the expression result
            couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/viewAnimationOptionsFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/modalTransitionStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIModalTransitionStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIModalTransitionStyle)modalTransitionStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIModalTransitionStyle value that corresponds with str.
            Returns UIModalTransitionStyleCoverVertical and logs an error to
            the console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/modalTransitionStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/modalTransitionStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIModalTransitionStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIModalTransitionStyle)modalTransitionStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIModalTransitionStyle value that corresponds with str.
            Returns UIModalTransitionStyleCoverVertical if str isn&apos;t
            recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/modalTransitionStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/modalTransitionStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIModalTransitionStyle value using the modalTransitionStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIModalTransitionStyle)modalTransitionStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIModalTransitionStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIModalTransitionStyleCoverVertical and logs an error to the 
            console if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/modalTransitionStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewContentModeFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIViewContentMode value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewContentMode)viewContentModeFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewContentMode value that corresponds with str.
            Returns UIViewContentModeScaleToFill and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/viewContentModeFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewContentModeFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIViewContentMode value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewContentMode)viewContentModeFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewContentMode value that corresponds with str.
            Returns UIViewContentModeScaleToFill if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/viewContentModeFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/viewContentModeFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIViewContentMode value using the viewContentModeFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIViewContentMode)viewContentModeFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIViewContentMode value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIViewContentModeScaleToFill and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/viewContentModeFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarStyle)barStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarStyle value that corresponds with str.
            Returns UIBarStyleDefault and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarStyle)barStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarStyle value that corresponds with str.
            Returns UIBarStyleDefault if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIBarStyle value using the barStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarStyle)barStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIBarStyleDefault and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/barStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonSystemItemFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarButtonSystemItem value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonSystemItem)barButtonSystemItemFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonSystemItem value that corresponds with str.
            Returns UIBarButtonSystemItemDone and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonSystemItemFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonSystemItemFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarButtonSystemItem value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonSystemItem)barButtonSystemItemFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonSystemItem value that corresponds with str.
            Returns UIBarButtonSystemItemDone if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonSystemItemFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonSystemItemFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIBarButtonSystemItem value using the barButtonSystemItemFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonSystemItem)barButtonSystemItemFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonSystemItem value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIBarButtonSystemItemDone and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonSystemItemFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonItemStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarButtonItemStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonItemStyle)barButtonItemStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonItemStyle value that corresponds with str.
            Returns UIBarButtonItemStylePlain and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonItemStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonItemStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIBarButtonItemStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonItemStyle)barButtonItemStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonItemStyle value that corresponds with str.
            Returns UIBarButtonItemStylePlain if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonItemStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/barButtonItemStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIBarButtonItemStyle value using the barButtonItemStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIBarButtonItemStyle)barButtonItemStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIBarButtonItemStyle value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIBarButtonItemStylePlain and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/barButtonItemStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarStyleFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIStatusBarStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarStyle)statusBarStyleFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarStyle value that corresponds with str.
            Returns UIStatusBarStyleDefault and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarStyleFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarStyleFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIStatusBarStyle value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarStyle)statusBarStyleFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarStyle value that corresponds with str.
            Returns UIStatusBarStyleDefault if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarStyleFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarStyleFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIStatusBarStyle value using the statusBarStyleFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarStyle)statusBarStyleFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarStyle value that corresponds with the
            result of evaluating expr as a string. Returns
            UIStatusBarStyleDefault and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarStyleFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarAnimationFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIStatusBarAnimation value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarAnimation)statusBarAnimationFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarAnimation value that corresponds with str.
            Returns UIStatusBarAnimationNone and logs an error to the
            console if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarAnimationFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarAnimationFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIStatusBarAnimation value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarAnimation)statusBarAnimationFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarAnimation value that corresponds with str.
            Returns UIStatusBarAnimationNone if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarAnimationFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/statusBarAnimationFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIStatusBarAnimation value using the statusBarAnimationFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIStatusBarAnimation)statusBarAnimationFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIStatusBarAnimation value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIStatusBarAnimationNone and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/statusBarAnimationFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/popoverArrowDirectionFromString:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIPopoverArrowDirection value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIPopoverArrowDirection)popoverArrowDirectionFromString:(nonnull NSString *)str</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIPopoverArrowDirection value that corresponds with str.
            Returns UIPopoverArrowDirectionAny logs an error to the console 
            if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/popoverArrowDirectionFromString:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/popoverArrowDirectionFromString:error:</TokenIdentifier>
			<Abstract type="html">Attempts to interpret a string as a UIPopoverArrowDirection value.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIPopoverArrowDirection)popoverArrowDirectionFromString:(nonnull NSString *)str error:(NSErrorPtrPtr)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>str</Name>
					<Abstract type="html">The string to interpret.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">An optional pointer to a memory location for storing an
            NSError instance in the event of a problem interpreting str.
            If non-nil and an error occurs, *errPtr will be set to an
            NSError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIPopoverArrowDirection value that corresponds with str.
            Returns UIPopoverArrowDirectionAny if str isn&apos;t recognized.</Abstract></ReturnValue>
			<Anchor>//api/name/popoverArrowDirectionFromString:error:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBStringConversions/popoverArrowDirectionFromExpression:</TokenIdentifier>
			<Abstract type="html">Evaluates a string expression and attempts to interpret the result as a
UIPopoverArrowDirection value using the popoverArrowDirectionFromString:
method.</Abstract>
			<DeclaredIn>MBStringConversions.h</DeclaredIn>
			
			<Declaration>+ (UIPopoverArrowDirection)popoverArrowDirectionFromExpression:(nonnull NSString *)expr</Declaration>
			<Parameters>
				<Parameter>
					<Name>expr</Name>
					<Abstract type="html">The expression whose result will be interpreted.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The UIPopoverArrowDirection value that corresponds with the
            result of evaluating expr as a string. Returns 
            UIPopoverArrowDirectionAny and logs an error to the console
            if the expression result couldn&apos;t be interpreted.</Abstract></ReturnValue>
			<Anchor>//api/name/popoverArrowDirectionFromExpression:</Anchor>
            <NodeRef refid="35"/>
		</Token>
		
        
        
	</File>
</Tokens>