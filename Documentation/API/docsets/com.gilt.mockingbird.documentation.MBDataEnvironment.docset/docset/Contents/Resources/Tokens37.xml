<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBVariableSpace.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBVariableSpace</TokenIdentifier>
			<Abstract type="html">The MBVariableSpace class is responsible for loading variable declarations
from MBML files and for maintaining the current values of named Mockingbird
variables across the lifetime of the application.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
            
			
			<NodeRef refid="37"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBVariableSpace/instance</TokenIdentifier>
			<Abstract type="html">Retrieves the MBVariableSpace instance associated with the currently-active
MBEnvironment.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>+ (nullable instancetype)instance</Declaration>
			
			<ReturnValue><Abstract type="html">The current variable space.</Abstract></ReturnValue>
			<Anchor>//api/name/instance</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/objectForKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Returns the current value for the variable with the given name using
the keyed subscripting notation.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable id)objectForKeyedSubscript:(nonnull NSString *)variableName</Declaration>
			<Parameters>
				<Parameter>
					<Name>variableName</Name>
					<Abstract type="html">The name of the MBML variable whose value is to be
            retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The current variable value. Will return nil if there is no
            variable with the given name or if there was an error retrieving
            the variable&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKeyedSubscript:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/variableAsString:</TokenIdentifier>
			<Abstract type="html">Returns the current string value of the variable with the given name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)variableAsString:(nonnull NSString *)varName</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable whose string value is being
            retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The current string value of the variable. Will return nil if
            there is no variable with the given name or if there was an error
            retrieving the variable&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/variableAsString:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/variableAsString:defaultValue:</TokenIdentifier>
			<Abstract type="html">Returns the current string value for the variable with the given name, or a
default value if there is no available variable value.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable NSString *)variableAsString:(nonnull NSString *)varName defaultValue:(nullable NSString *)def</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable whose string value is being
            retrieved.</Abstract>
				</Parameter><Parameter>
					<Name>def</Name>
					<Abstract type="html">A default value to return in cases where the method would
            otherwise return nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The current string value of the variable. Will return def if
            there is no variable with the given name or if there was an error
            retrieving the variable&apos;s value.</Abstract></ReturnValue>
			<Anchor>//api/name/variableAsString:defaultValue:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/setObject:forKeyedSubscript:</TokenIdentifier>
			<Abstract type="html">Sets a variable to the given value using the keyed subscripting notation.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)setObject:(nullable id)value forKeyedSubscript:(nonnull NSString *)variableName</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set for the variable named variableName.</Abstract>
				</Parameter><Parameter>
					<Name>variableName</Name>
					<Abstract type="html">The name of the variable whose value is to be set.
            If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKeyedSubscript:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/pushVariable:value:</TokenIdentifier>
			<Abstract type="html">Pushes a new value onto the stack for the variable with the given name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)pushVariable:(nonnull NSString *)variableName value:(nullable id)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>variableName</Name>
					<Abstract type="html">The name of the variable whose value is to be set.
            If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to set for the variable named variableName.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushVariable:value:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/popVariable:</TokenIdentifier>
			<Abstract type="html">Pops the current value from the stack for the variable with the given name.
(The value of the variable prior to the previous call to pushVariable:value:
will be restored.)</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable id)popVariable:(nonnull NSString *)varName</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable whose value is to be set.
            If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The value of the variable varName that was popped from the stack.
            If there were no stack values for the variable, nil will be
            returned.</Abstract></ReturnValue>
			<Anchor>//api/name/popVariable:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/setMapVariable:mapKey:value:</TokenIdentifier>
			<Abstract type="html">Sets the value of a given key for the type=&quot;map&quot; variable with the specified
name. (This method will also operate on any variable whose value is of type
NSDictionary.)</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)setMapVariable:(nonnull NSString *)varName mapKey:(nonnull NSString *)key value:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the map variable whose key-value is being set.
            If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The map key whose value is being set.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">The new value for the given key. If nil, the value for key
            will be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setMapVariable:mapKey:value:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/setListVariable:listIndex:value:</TokenIdentifier>
			<Abstract type="html">Sets the value of a given key for the type=&quot;list&quot; variable with the specified
name. (This method will also operate on any variable whose value is of type
NSArray.)</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)setListVariable:(nonnull NSString *)varName listIndex:(NSUInteger)idx value:(nullable id)val</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the list variable whose index-value is being
            set. If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter><Parameter>
					<Name>idx</Name>
					<Abstract type="html">The list index whose value is being set. If idx is
            greater than the last index of the list, the list array will be
            expanded to include the new index, and any empty index slots
            will be filled with NSNull.</Abstract>
				</Parameter><Parameter>
					<Name>val</Name>
					<Abstract type="html">The new value to set at the given index. If nil, the value
            will be set as NSNull.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setListVariable:listIndex:value:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/unsetVariable:</TokenIdentifier>
			<Abstract type="html">Removes the current value of the variable with the specified name. Values on
the variable stack will not be affected.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)unsetVariable:(nonnull NSString *)varName</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable whose value is to be unset.
            If the name represents a read-only variable, the call will be
            ignored and an error will be logged to the console.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unsetVariable:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBVariableSpace/name:withSuffix:</TokenIdentifier>
			<Abstract type="html">Constructs a string for a variable-related name with the given suffix.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>+ (nullable NSString *)name:(nullable NSString *)name withSuffix:(nullable NSString *)suffix</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name to use for the root of the returned string. If
            nil, this method returns nil.</Abstract>
				</Parameter><Parameter>
					<Name>suffix</Name>
					<Abstract type="html">The optional suffix to apply to name. If nil, this
            method returns name.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If name and suffix are both non-nil, the concatenation of
            name, &quot;:&quot; and suffix is returned. Otherwise, the value of the
            name parameter is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/name:withSuffix:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/isReadOnlyVariable:</TokenIdentifier>
			<Abstract type="html">Determines whether the variable with the given name is a read-only variable.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (BOOL)isReadOnlyVariable:(nonnull NSString *)varName</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the variable named varName is read-only; NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/isReadOnlyVariable:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/declareVariable:</TokenIdentifier>
			<Abstract type="html">Programmatically declares a variable.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (BOOL)declareVariable:(nonnull MBVariableDeclaration *)declaration</Declaration>
			<Parameters>
				<Parameter>
					<Name>declaration</Name>
					<Abstract type="html">An MBVariableDeclaration representing the variable.
            Note that this method ignores the shouldDeclare property of the
            variable declaration.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the variable represented by declaration was successfully
            declared; NO if an error occured.</Abstract></ReturnValue>
			<Anchor>//api/name/declareVariable:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/declarationForVariable:</TokenIdentifier>
			<Abstract type="html">Returns the MBVariableDeclaration for the variable with the given name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable MBVariableDeclaration *)declarationForVariable:(nonnull NSString *)varName</Declaration>
			<Parameters>
				<Parameter>
					<Name>varName</Name>
					<Abstract type="html">The name of the variable whose declaration is being
            retrieved.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The declaration for varName, or nil if no declaration exists.</Abstract></ReturnValue>
			<Anchor>//api/name/declarationForVariable:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/declareFunction:</TokenIdentifier>
			<Abstract type="html">Programmatically declares an MBML function.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (BOOL)declareFunction:(nonnull MBMLFunction *)function</Declaration>
			<Parameters>
				<Parameter>
					<Name>function</Name>
					<Abstract type="html">An MBMLFunction representing the function and its
            implementation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if function was successfully declared; NO if an error
            occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/declareFunction:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/functionNames</TokenIdentifier>
			<Abstract type="html">Returns the names of the currently-declared MBML functions.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nonnull NSArray *)functionNames</Declaration>
			
			<ReturnValue><Abstract type="html">An NSArray containing the names of the declared MBML functions.</Abstract></ReturnValue>
			<Anchor>//api/name/functionNames</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/functionWithName:</TokenIdentifier>
			<Abstract type="html">Returns the MBMLFunction associated with the given name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (nullable MBMLFunction *)functionWithName:(nonnull NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the function whose MBMLFunction is sought.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The MBMLFunction, or nil if there is no function declared having
            the given name.</Abstract></ReturnValue>
			<Anchor>//api/name/functionWithName:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/addObserverForUserDefault:target:action:</TokenIdentifier>
			<Abstract type="html">Adds an observer to be notified of changes to the value of the Mockingbird
variable with the given NSUserDefaults key name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)addObserverForUserDefault:(nonnull NSString *)userDefaultsName target:(nonnull id)observer action:(nonnull SEL)action</Declaration>
			<Parameters>
				<Parameter>
					<Name>userDefaultsName</Name>
					<Abstract type="html">The userDefaultsName of the variable to observe.
            Note that this is not necessarily the same as the variable name.</Abstract>
				</Parameter><Parameter>
					<Name>observer</Name>
					<Abstract type="html">The object to notify.</Abstract>
				</Parameter><Parameter>
					<Name>action</Name>
					<Abstract type="html">The method selector of observer to call when notifying.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addObserverForUserDefault:target:action:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/MBVariableSpace/removeObserver:forUserDefault:</TokenIdentifier>
			<Abstract type="html">Stops an observer from being notified of changes to the value of the
Mockingbird variable with the given NSUserDefaults key name.</Abstract>
			<DeclaredIn>MBVariableSpace.h</DeclaredIn>
			
			<Declaration>- (void)removeObserver:(nonnull id)observer forUserDefault:(nonnull NSString *)userDefaultsName</Declaration>
			<Parameters>
				<Parameter>
					<Name>observer</Name>
					<Abstract type="html">The observer to remove.</Abstract>
				</Parameter><Parameter>
					<Name>userDefaultsName</Name>
					<Abstract type="html">The userDefaultsName of the variable to stop
            observing.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObserver:forUserDefault:</Anchor>
            <NodeRef refid="37"/>
		</Token>
		
        
        
	</File>
</Tokens>