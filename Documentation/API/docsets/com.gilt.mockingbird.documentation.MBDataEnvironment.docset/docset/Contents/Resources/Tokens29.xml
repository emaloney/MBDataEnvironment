<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/MBMLRuntimeFunctions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/MBMLRuntimeFunctions</TokenIdentifier>
			<Abstract type="html">This class implements a set of MBML functions and supporting methods that
provide access to Objective-C runtime information.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
            
			
			<NodeRef refid="29"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/resolveClass:error:</TokenIdentifier>
			<Abstract type="html">Given a Class or a string containing the name of an Objective-C class, this
method returns a Class object.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (Class)resolveClass:(id)resolveCls error:(inout MBMLFunctionError **)errPtr</Declaration>
			<Parameters>
				<Parameter>
					<Name>resolveCls</Name>
					<Abstract type="html">A Class object or an NSString instance containing
            the name of a class.</Abstract>
				</Parameter><Parameter>
					<Name>errPtr</Name>
					<Abstract type="html">If non-nil and an error occurs, *errPtr will be
            set to an MBMLFunctionError instance indicating the error.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A Class object representing the specified class, or nil if
            the specified class was not recognized by the Objective-C runtime.</Abstract></ReturnValue>
			<Anchor>//api/name/resolveClass:error:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/classExists:</TokenIdentifier>
			<Abstract type="html">Determines whether a given class exists in the Objective-C runtime.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)classExists:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If there is a class with the given name, @YES is returned.
            Otherwise, @NO.</Abstract></ReturnValue>
			<Anchor>//api/name/classExists:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/getClass:</TokenIdentifier>
			<Abstract type="html">Returns the Class object for the given class name.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)getClass:(NSString *)className</Declaration>
			<Parameters>
				<Parameter>
					<Name>className</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If there is a class with the given name, the corresponding
            Class object is returned. Otherwise, nil is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/getClass:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/singleton:</TokenIdentifier>
			<Abstract type="html">Returns the singleton instance of a given class.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)singleton:(id)forCls</Declaration>
			<Parameters>
				<Parameter>
					<Name>forCls</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If there is a class with the given name, the corresponding
            Class object is returned. Otherwise, nil is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/singleton:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/inheritanceHierarchyForClass:</TokenIdentifier>
			<Abstract type="html">Returns an array containing the inheritance hierarchy of a given class.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)inheritanceHierarchyForClass:(id)forCls</Declaration>
			<Parameters>
				<Parameter>
					<Name>forCls</Name>
					<Abstract type="html">The function&apos;s input parameter.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the Objective-C class hierarchy for the
            specified class. If no such class was found, nil is returned.</Abstract></ReturnValue>
			<Anchor>//api/name/inheritanceHierarchyForClass:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/objectRespondsToSelector:</TokenIdentifier>
			<Abstract type="html">Determines whether a given object instance responds to a specific Objective-C
message selector.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)objectRespondsToSelector:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If object instance referenced in the object expression
            responds to the selector specified in the selector expression,
            the return value will be @YES. Otherwise, @NO will be returned.</Abstract></ReturnValue>
			<Anchor>//api/name/objectRespondsToSelector:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/MBMLRuntimeFunctions/classRespondsToSelector:</TokenIdentifier>
			<Abstract type="html">Determines whether a given class responds to a specific Objective-C message
selector.</Abstract>
			<DeclaredIn>MBMLRuntimeFunctions.h</DeclaredIn>
			
			<Declaration>+ (id)classRespondsToSelector:(NSArray *)params</Declaration>
			<Parameters>
				<Parameter>
					<Name>params</Name>
					<Abstract type="html">The function&apos;s input parameters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">If the Objective-C class referenced in the class expression
            responds to the selector specified in the selector expression,
            the return value will be @YES. Otherwise, @NO will be returned.</Abstract></ReturnValue>
			<Anchor>//api/name/classRespondsToSelector:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
        
        
	</File>
</Tokens>